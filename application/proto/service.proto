syntax = "proto3";

option go_package = "github.com/Kapperchino/jet-application/proto";

service MessageService {
  rpc PublishMessages(PublishMessageRequest) returns (PublishMessageResponse) {}
  rpc CreateConsumer(CreateConsumerRequest) returns (CreateConsumerResponse) {}
  rpc Consume(ConsumeRequest) returns (ConsumeResponse) {}
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse) {}
  rpc AckConsume(AckConsumeRequest) returns (AckConsumeResponse) {}
}

message AckConsumeRequest {
  map<uint64, uint64> offsets = 1;
  uint64 id = 2;
}

message AckConsumeResponse {
}

message PublishMessageRequest {
  string topic = 1;
  uint64 partition = 2;
  repeated KeyVal messages = 3;
}

message PublishMessageResponse {
  repeated Message messages = 1;
  uint64 lastIndex = 2;
}

message ScaleTopicRequest {
  string topic = 1;
  uint64 partitions = 2;
}

message ScaleTopicResponse {
  uint64 lastIndex = 1;
}

message CreateTopicRequest {
  string topic = 1;
  uint64 numPartitions = 2;
}

message CreateTopicResponse {
}

message CreateConsumerRequest {
  string topic = 1;
}

message CreateConsumerResponse {
  uint64 consumerId = 1;
  uint64 lastIndex = 2;
}

message ConsumeRequest {
  string topic = 1;
  uint64 consumerId = 2;
}

message ConsumeResponse {
  repeated Message messages = 1;
  uint64 lastIndex = 2;
}

message Message {
  bytes key = 1;
  bytes payload = 2;
  string topic = 3;
  uint64 partition = 4;
  uint64 offset = 5;
  uint64 raftIndex = 6;
}

message KeyVal {
  bytes key = 1;
  bytes val = 2;
}

message Publish {
  string topic = 1;
  uint64 partition = 2;
  repeated KeyVal messages = 3;
}

message PublishResult {
  repeated Message messages = 1;
}

message CreateConsumer{
  string topic = 1;
}

message CreateConsumerResult{
}

message CreateTopic{
  string topic = 1;
  uint64 partitions = 2;
}

message CreateTopicResult{
}

message AddMember{
  string nodeId = 1;
  string address = 2;
}

message AddMemberResult{
}

message RemoveMember{
  string nodeId = 1;
}

message RemoveMemberResult{
}

message Ack{
  map<uint64, uint64> offsets = 1;
  uint64 id = 2;
}

message AckResult{
}


enum Operation {
  PUBLISH = 0;
  ACK = 1;
  CREATE_CONSUMER = 2;
  CREATE_TOPIC = 3;
  ADD_MEMBER = 4;
  REMOVE_MEMBER = 5;
}

message WriteOperation {
  oneof operation {
    Publish publish = 1;
    Ack ack = 2;
    CreateConsumer createConsumer = 3;
    CreateTopic createTopic = 4;
    AddMember addMember = 5;
    RemoveMember removeMember = 6;
  }
  Operation code = 7;
}

message WriteResult {
  oneof result {
    PublishResult publishResult = 1;
    AckResult ackResult = 2;
    CreateConsumerResult createConsumerResult = 3;
    CreateTopicResult createTopicResult = 4;
    AddMemberResult addMemberResult = 5;
    RemoveMemberResult removeMemberResult = 6;
  }
}

message Snapshot {

}
